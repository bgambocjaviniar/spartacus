on:
  workflow_dispatch:
    inputs:
      sample_branch:
        description: Publish spartacus sample data to standard Spartacus ccv2 repository
        default: release/2105/next
        required: true

name: Publish Spartacus Sample Data to Spartacus CCv2 repository
jobs:
  publish_sample_data: 
    name: Publishing Spartacus Sample Data
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download the zip and tar files
        run: |
          curl -H "Authorization: token ${{ secrets.BRIAN_PAT }}" -L https://github.tools.sap/cx-commerce/spartacussampledata/archive/${{ github.event.inputs.sample_branch }}.zip --output spartacussampledata.zip
          curl -H "Authorization: token ${{ secrets.BRIAN_PAT }}" -L https://github.tools.sap/cx-commerce/spartacussampledata/archive/${{ github.event.inputs.sample_branch }}.tar.gz --output spartacussampledata.tar.gz

          ls -al
          pwd
      - name: Create tag
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.BRIAN_PUB_ONE }}
          script: |
            const referenceResponse = await github.rest.git.getRef({
              owner: 'bgambocjaviniar',
              repo: 'npmrc-not-pickedup-with-yarn-for-private-repo-test',
              ref: 'heads/main'
            });
            const { data: { object: { sha } } } = referenceResponse;

            try {
              await github.rest.git.deleteRef({
                owner: 'bgambocjaviniar',
                repo: 'npmrc-not-pickedup-with-yarn-for-private-repo-test',
                ref: 'tags/anything',
              });

              await github.rest.git.createRef({
                owner: 'bgambocjaviniar',
                repo: 'npmrc-not-pickedup-with-yarn-for-private-repo-test',
                ref: 'refs/tags/anything',
                sha
              });

            } catch (error) {
              if (error.message.includes('not exist')) {
                await github.rest.git.createRef({
                owner: 'bgambocjaviniar',
                repo: 'npmrc-not-pickedup-with-yarn-for-private-repo-test',
                ref: 'refs/tags/anything',
                sha
              });
              }
            }

    
      - name: Create Release / Update Release
        id: vat
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.BRIAN_PUB_ONE }}
          script: |

            const getReleaseResponse = await github.rest.repos.getReleaseByTag({
              owner: 'bgambocjaviniar',
              repo: 'npmrc-not-pickedup-with-yarn-for-private-repo-test',
              tag: 'b'
            })
            const { data: { id }} = getReleaseResponse;



            const createReleaseResponse = await github.rest.repos.createRelease({
              owner: 'bgambocjaviniar',
              repo: 'npmrc-not-pickedup-with-yarn-for-private-repo-test',
              tag_name: 'anything',
              name: 'Spartacus sample data'
            });

            const { data: { id, upload_url }} = response;

            core.setOutput('id', id);
            core.setOutput('yes', upload_url);

            console.log('response', response);
      - name: cwd
        run: | 
          ls -al
          pwd
      - name: vat test
        uses: actions/github-script@v5
        env:
          RELEASE_ID: ${{ steps.vat.outputs.id}}
          UPLOAD_URL: ${{ steps.vat.outputs.yes}}
        with:
          github-token: ${{ secrets.BRIAN_PUB_ONE }}
          script: |
            const fs = require('fs');
            const tarHeaders = { 'content-type': `application/x-tar`, 'content-length': fs.statSync(`./spartacussampledata.tar.gz`).size };
            const zipHeaders = { 'content-type': `application/zip`, 'content-length': fs.statSync(`./spartacussampledata.zip`).size };

            console.log('__dirname why', process.cwd());

            console.log(tarHeaders);
            console.log(zipHeaders);

            await github.rest.repos.uploadReleaseAsset({
              url: `${{steps.vat.outputs.yes }}`,
              release_id: `${{ steps.vat.outputs.id }}`,
              headers: tarHeaders,
              name: `spartacussampledata.tar.gz`,
              file: `./spartacussampledata.tar.gz`
            });

            const abc = await github.rest.repos.uploadReleaseAsset({
              url: `${{steps.vat.outputs.yes }}`,
              release_id: `${{ steps.vat.outputs.id }}`,
              headers: zipHeaders,
              name: `spartacussampledata.zip`,
              file: fs.readFileSync(`./spartacussampledata.zip`)
            });

            console.log('abc', abc);

      # - name: delete release
      #   uses: actions/github-script@v5
      #   env:
      #     RELEASE_ID: ${{ steps.vat.outputs.id}}
      #     UPLOAD_URL: ${{ steps.vat.outputs.yes}}
      #   with:
      #     github-token: ${{ secrets.BRIAN_PUB_ONE }}
      #     script: |
      #       await github.rest.repos.deleteRelease({
      #         owner: 'bgambocjaviniar',
      #         repo: 'npmrc-not-pickedup-with-yarn-for-private-repo-test',
      #         release_id: `${{ steps.vat.outputs.id }}`
      #       });

