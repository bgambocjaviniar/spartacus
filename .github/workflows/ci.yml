on:
  push:
    branches:
      - develop
      - epic/**
      - release/**
      - integration-libs/**
  pull_request:
    types: [opened, synchronize]
env:
  CYPRESS_KEY: ${{ secrets.CYPRESS_KEY }}
  NODE_VERSION: '16'

concurrency: 
  group: ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

name: Spartacus build pipeline
jobs:
  prepend_license: 
    name: Commit prepended licences to files 
    runs-on: ubuntu-latest
    outputs: 
      SHOULD_SKIP_CURRENT_WORKFLOW: ${{ steps.commit-to-pr.outputs.SHOULD_SKIP_CURRENT_WORKFLOW }}
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GH_TEMPORARY_TOKEN }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Download reuse tool
        run: pip3 install --user reuse
      - name: Setup git config for github bot
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
      - name: Adding headers to files
        run: ci-scripts/prepend-license.sh
      - name: push a commit to current pull request
        id: commit-to-pr
        run: |
          git pull origin ${{ github.event.pull_request.head.ref }} 
          SKIP_CURRENT_WORKFLOW=false


          if [ -z $(git status --porcelain) ];
          then
              echo "No files to commit"
          else
              SKIP_CURRENT_WORKFLOW=true
              git commit -am "Prepend licence to files"
              git push
          fi

          echo "::set-output name=SHOULD_SKIP_CURRENT_WORKFLOW::$(echo $SKIP_CURRENT_WORKFLOW)"
  no_retries:
    needs: prepend_license
    name: Verify re-run of all jobs
    runs-on: ubuntu-latest
    if: ${{ needs.validate_e2e_execution.outputs.SHOULD_SKIP_CURRENT_WORKFLOW == 'true' }}
    steps:
      - name: Forcefully fail build if jobs are all retried
        uses: actions/github-script@v5
        with:
          script: |
            core.setFailed('Please push a commit to trigger the build. To push an empty commit you can use `git commit --allow-empty -m "Trigger Build"`') 
        if: ${{ github.run_attempt > 1 }}
  validate_e2e_execution:
    name: Validate pull_request files
    runs-on: ubuntu-latest
    outputs: 
      SHOULD_RUN_E2E: ${{ steps.save-e2e-output-result.outputs.SHOULD_RUN_E2E }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Determine whether to run e2es
        id: save-e2e-output-result
        run: |         
          source ci-scripts/validate-e2e-execution.sh
          echo "::set-output name=SHOULD_RUN_E2E::$(echo $RUN_E2E)"
  unit_tests_core:
    needs: no_retries
    name: Unit tests for core Spartacus libs
    runs-on: ubuntu-latest
    steps:
      - name: 'test'
        run: echo "ok"
  unit_tests_libs:
    needs: no_retries
    name: Unit tests for integration libs
    runs-on: ubuntu-latest
    steps:
      - name: 'test'
        run: echo "ok"
  linting:
    needs: no_retries
    name: Validations and static code checks
    runs-on: ubuntu-latest
    steps:
      - name: 'test'
        run: echo "ok"
  b2c_e2e_tests:
    needs: [no_retries, validate_e2e_execution]
    name: E2E tests for B2C
    runs-on: ubuntu-latest
    strategy:
      matrix:
        containers: [1, 2, 3, 4, 5]
    if: ${{ github.event_name == 'push' || needs.validate_e2e_execution.outputs.SHOULD_RUN_E2E == 'true' }}
    steps:
      - name: 'test'
        run: echo "ok"
  b2c_ssr_e2e_tests:
    needs: [no_retries, validate_e2e_execution]
    name: E2E tests for SSR B2C
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || needs.validate_e2e_execution.outputs.SHOULD_RUN_E2E == 'true' }}
    steps:
      - name: 'test'
        run: echo "ok"
  b2b_e2e_tests:
    needs: [no_retries, validate_e2e_execution]
    name: E2E tests for B2B
    runs-on: ubuntu-latest
    strategy:
      matrix:
        containers: [1, 2]
    if: ${{ github.event_name == 'push' || needs.validate_e2e_execution.outputs.SHOULD_RUN_E2E == 'true' }}
    steps:
      - name: 'test'
        run: echo "ok"
  build_conclusion:
    needs: [no_retries, unit_tests_core, unit_tests_libs, linting, b2c_e2e_tests, b2c_ssr_e2e_tests, b2b_e2e_tests]
    name: Build Conclusion
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Required build failed
        uses: actions/github-script@v5
        with:
          script: |
            core.setFailed('Build failed')
        if: |
          needs.no_retries.result == 'failure' || needs.no_retries.result == 'cancelled' ||
          needs.unit_tests_core.result == 'failure' || needs.unit_tests_core.result == 'cancelled' ||
          needs.unit_tests_libs.result == 'failure' || needs.unit_tests_libs.result == 'cancelled' ||
          needs.linting.result == 'failure' || needs.linting.result == 'cancelled' ||
          needs.b2c_e2e_tests.result == 'failure' || needs.b2c_e2e_tests.result == 'cancelled' ||
          needs.b2c_ssr_e2e_tests.result == 'failure' || needs.b2c_ssr_e2e_tests.result == 'cancelled' || 
          needs.b2b_e2e_tests.result == 'failure' || needs.b2b_e2e_tests.result == 'cancelled'
  send_slack_message:
    needs: build_conclusion
    name: Slack message for failed develop CI build in Spartacus
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Notify the slack channel of when build conclusion failed
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: ${{ secrets.SLACK_NOTIFICATION_CHANNEL }}
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":nuclear-bomb: :fireduck: *Broken build in develop*"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Failed build",
                        "emoji": true
                      },
                      "value": "failed_build",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "What was committed?",
                        "emoji": true
                      },
                      "value": "recent_merged_commit",
                      "url": "${{ github.event.head_commit.url }}"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Build history",
                        "emoji": true
                      },
                      "value": "buid_history",
                      "url": "https://github.com/SAP/spartacus/actions/workflows/ci.yml?query=branch%3Adevelop"
                    }
                  ]
                }
              ]
            }
        if: | 
          needs.build_conclusion.result == 'failure' &&
          github.event_name == 'push' && 
          github.ref_name == 'develop'

